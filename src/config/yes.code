import axios from "axios";
import dotenv from "dotenv";
import fs from "fs";
import FormData from "form-data";

dotenv.config();

const VDOCIPHER_API_SECRET = process.env.VDOCIPHER_API_SECRET || "wpbIP2C5BjBM5POiFW6nGWHmQsSJeclXaVUWKzGIGpzERVU7MxtyYJNtp0aXQJBG";

export class VdoCipherQuotaError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "VdoCipherQuotaError";
  }
}

const vdoCipherClient = axios.create({
  baseURL: "https://dev.vdocipher.com/api",
  headers: {
    Authorization: `Apisecret ${VDOCIPHER_API_SECRET}`,
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

export const getUploadInfo = async (title: string) => {
  try {
    // Send title as a query parameter instead of in the body
    const response = await vdoCipherClient.put(`/videos?title=${encodeURIComponent(title)}`, {});

    if (!response.data?.clientPayload?.uploadLink) {
      throw new Error("Invalid response from VdoCipher API");
    }

    return {
      videoId: response.data.videoId,
      uploadLink: response.data.clientPayload.uploadLink,
      uploadParams: response.data.clientPayload.params,
    };
  } catch (error) {
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 403) {
        throw new VdoCipherQuotaError(
          error.response.data?.message || "You have reached the VdoCipher trial account limit."
        );
      }
      if (error.response?.status === 400) {
        throw new Error("Invalid request to VdoCipher API: " + (error.response.data?.message || "Bad Request"));
      }
    }
    throw error;
  }
};

export const uploadVideoToVdoCipher = async (filePath: string, uploadInfo: { uploadLink: string }) => {
  const formData = new FormData();
  formData.append("file", fs.createReadStream(filePath));

  const response = await axios.post(uploadInfo.uploadLink, formData, {
    headers: formData.getHeaders(),
    timeout: 600000,
    maxContentLength: Infinity,
    maxBodyLength: Infinity,
  });

  return response.data;
};

export const getVideoInfo = async (videoId: string) => {
  const response = await vdoCipherClient.get(`/videos/${videoId}`);
  return response.data;
};

export const deleteVdoCipherVideo = async (videoId: string) => {
  await vdoCipherClient.delete(`/videos/${videoId}`);
  return true;
};

export const listVideos = async () => {
  const response = await vdoCipherClient.get("/videos");
  return response.data;
};

export default {
  getUploadInfo,
  uploadVideoToVdoCipher,
  getVideoInfo,
  deleteVdoCipherVideo,
  listVideos,
  VdoCipherQuotaError,
};